import numpy as np
import math
import datetime
import pandas as pd
from urllib.request import urlopen
from json import load
from timezonefinder import TimezoneFinder
import pytz
import click

import moon as moon
import sun as sun
import aamaths as aam
import drawing as drw
import lst as lst

def loc_here():
    res = urlopen('https://ipinfo.io/json')
    data = load(res)
    return [float(x) for x in data['loc'].split(',')]


def get_moon_info(dt, coords, tz):

    # Rearrange coords
    latitude, longitude = coords

    print(f'datetime {dt} + {tz} hour/s offset')
    print(f'longitude {longitude}')
    print(f'latitude {latitude}')

    # Angles to objects from Earth
    moon_beta, moon_lambda = moon.ecliptical_coords(dt)
    sun_beta, sun_lambda = sun.ecliptical_coords(dt)

    print()
    print('Geocentric Ecliptical Coordinates of Sun')
    print(f'Moon\'s latitude {moon_beta} (moon_beta)')
    print(f'Moon\'s longitude {moon_lambda} (moon_lambda)')
    print(f'Sun\'s latitude {sun_beta} (sun_beta)')
    print(f'Sun\'s longitude {sun_lambda} (sun_lambda)')

    # Illuminated fraction (ratio of surface area illumintaed vs total)
    illum_percent = moon.illuminated_fraction(
        moon_beta, moon_lambda, sun_lambda)

    # Now, we work on getting the moon bright limb angle. First we need equatorial coords
    moon_alpha, moon_delta = aam.ecliptical2equatorial(moon_beta, moon_lambda)
    sun_alpha, sun_delta = aam.ecliptical2equatorial(sun_beta, sun_lambda)

    print()
    print('Geocentric Equatorial Coordinates of Sun')
    print(f'Moon\'s RA {moon_alpha} (moon_alpha)')
    print(f'Moon\'s declination {moon_delta} (moon_delta)')
    print(f'Sun\'s RA {sun_alpha} (sun_alpha)')
    print(f'Sun\'s declination {sun_delta} (sun_delta)')

    # Now, we can get the bright limb angle referenced to the north point of the disk
    bl_angle_deg = moon.bright_limb_angle(
        sun_delta, sun_alpha, moon_delta, moon_alpha, dt, tz, longitude, latitude)

    print()
    print(f'bl_angle_deg {bl_angle_deg}')

    moonrise, moonset = moon.moon_times(dt, latitude, longitude)
    print()
    print(f'moonrise {moonrise}')
    print(f'moonset {moonset}')

    visible = False
    if moonrise < dt and moonset > dt:
        visible = True

    print(f'Moon is visible = {visible}')

    # Return the info
    return [illum_percent, bl_angle_deg, visible]

@click.command()
@click.option('--loc', default="39.16,-9.818", help='longitude,latitude format, please')
@click.option('--time', default="2023-02-15 16:25:00", help='YYYY-MM-DD HH:MM:SS format, please.')
@click.option('--timezone', default="0", help='In hours, please.')
@click.option('--auto', default=False, help='True or False')
@click.option('--image', default=False, help='Draw and image of the moon. True or False')
@click.option('--image_size', default=400, help='Size of the moon image (x and y)')
def test(loc, time, timezone, auto, image, image_size):

    # The program should get all the user data
    if auto:
        dt = datetime.datetime.now()
        loc = loc_here()
        tz = TimezoneFinder().timezone_at(lng=loc[1], lat=loc[0])
        tz_offset = float(pytz.timezone(tz).utcoffset(dt).total_seconds() / 3600)

    # Manual entry
    else:
        dt = datetime.datetime.strptime(time, "%Y-%m-%d %H:%M:%S")
        loc = [float(x) for x in loc.split(',')]
        tz_offset = float(timezone)

    # Calc everything
    illum, angle, visible = get_moon_info(dt, loc, tz_offset)

    # Output results
    print()
    print(f'Bright Limb Area {round(illum * 100, 3)}%')
    print(f'Bright Limb Angle {round(angle, 3)}Â°')

    # Output an image of the moon
    if image:
        drw.draw_moon(int(image_size), illum * 100, angle, visible).show()

if __name__ == '__main__':
    test()

